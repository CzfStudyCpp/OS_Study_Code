POSIX_MEMALIGN(3)                                                                         Linux Programmer's Manual                                                                         POSIX_MEMALIGN(3)

NNAAMMEE
       posix_memalign, aligned_alloc, memalign, valloc, pvalloc - allocate aligned memory

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddlliibb..hh>>

       iinntt ppoossiixx__mmeemmaalliiggnn((vvooiidd ****_m_e_m_p_t_r,, ssiizzee__tt _a_l_i_g_n_m_e_n_t,, ssiizzee__tt _s_i_z_e));;
       vvooiidd **aalliiggnneedd__aalllloocc((ssiizzee__tt _a_l_i_g_n_m_e_n_t,, ssiizzee__tt _s_i_z_e));;
       vvooiidd **vvaalllloocc((ssiizzee__tt _s_i_z_e));;

       ##iinncclluuddee <<mmaalllloocc..hh>>

       vvooiidd **mmeemmaalliiggnn((ssiizzee__tt _a_l_i_g_n_m_e_n_t,, ssiizzee__tt _s_i_z_e));;
       vvooiidd **ppvvaalllloocc((ssiizzee__tt _s_i_z_e));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ppoossiixx__mmeemmaalliiggnn(): _POSIX_C_SOURCE >= 200112L

       aalliiggnneedd__aalllloocc(): _ISOC11_SOURCE

       vvaalllloocc():
           Since glibc 2.12:
               (_XOPEN_SOURCE >= 500) && !(_POSIX_C_SOURCE >= 200112L)
                   || /* Glibc since 2.19: */ _DEFAULT_SOURCE
                   || /* Glibc versions <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
           Before glibc 2.12:
               _BSD_SOURCE || _XOPEN_SOURCE >= 500
               (The (nonstandard) header file _<_m_a_l_l_o_c_._h_> also exposes the declaration of vvaalllloocc(); no feature test macros are required.)

DDEESSCCRRIIPPTTIIOONN
       The  function  ppoossiixx__mmeemmaalliiggnn()  allocates _s_i_z_e bytes and places the address of the allocated memory in _*_m_e_m_p_t_r.  The address of the allocated memory will be a multiple of _a_l_i_g_n_m_e_n_t, which must be a
       power of two and a multiple of _s_i_z_e_o_f_(_v_o_i_d _*_).  This address can later be successfully passed to ffrreeee(3).  If _s_i_z_e is 0, then the value placed in _*_m_e_m_p_t_r is either NULL or a unique pointer value.

       The obsolete function mmeemmaalliiggnn() allocates _s_i_z_e bytes and returns a pointer to the allocated memory.  The memory address will be a multiple of _a_l_i_g_n_m_e_n_t, which must be a power of two.

       The function aalliiggnneedd__aalllloocc() is the same as mmeemmaalliiggnn(), except for the added restriction that _s_i_z_e should be a multiple of _a_l_i_g_n_m_e_n_t.

       The obsolete function vvaalllloocc() allocates _s_i_z_e bytes and returns a pointer to the allocated memory.   The  memory  address  will  be  a  multiple  of  the  page  size.   It  is  equivalent  to  _m_e_m_a_‐
       _l_i_g_n_(_s_y_s_c_o_n_f_(___S_C___P_A_G_E_S_I_Z_E_)_,_s_i_z_e_).

       The obsolete function ppvvaalllloocc() is similar to vvaalllloocc(), but rounds the size of the allocation up to the next multiple of the system page size.

       For all of these functions, the memory is not zeroed.

RREETTUURRNN VVAALLUUEE
       aalliiggnneedd__aalllloocc(), mmeemmaalliiggnn(), vvaalllloocc(), and ppvvaalllloocc() return a pointer to the allocated memory on success.  On error, NULL is returned, and _e_r_r_n_o is set to indicate the cause of the error.

       ppoossiixx__mmeemmaalliiggnn()  returns  zero on success, or one of the error values listed in the next section on failure.  The value of _e_r_r_n_o is not set.  On Linux (and other systems), ppoossiixx__mmeemmaalliiggnn() does not
       modify _m_e_m_p_t_r on failure.  A requirement standardizing this behavior was added in POSIX.1-2008 TC2.

EERRRROORRSS
       EEIINNVVAALL The _a_l_i_g_n_m_e_n_t argument was not a power of two, or was not a multiple of _s_i_z_e_o_f_(_v_o_i_d _*_).

       EENNOOMMEEMM There was insufficient memory to fulfill the allocation request.

VVEERRSSIIOONNSS
       The functions mmeemmaalliiggnn(), vvaalllloocc(), and ppvvaalllloocc() have been available since at least glibc 2.0.

       The function aalliiggnneedd__aalllloocc() was added to glibc in version 2.16.

       The function ppoossiixx__mmeemmaalliiggnn() is available since glibc 2.1.91.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌─────────────────┬───────────────┬────────────────┐
       │IInntteerrffaaccee        │ AAttttrriibbuuttee     │ VVaalluuee          │
       ├─────────────────┼───────────────┼────────────────┤
       │aalliiggnneedd__aalllloocc(), │ Thread safety │ MT-Safe        │
       │mmeemmaalliiggnn(),      │               │                │
       │ppoossiixx__mmeemmaalliiggnn() │               │                │
       ├─────────────────┼───────────────┼────────────────┤
       │vvaalllloocc(),        │ Thread safety │ MT-Unsafe init │
       │ppvvaalllloocc()        │               │                │
       └─────────────────┴───────────────┴────────────────┘

CCOONNFFOORRMMIINNGG TTOO
       The function vvaalllloocc() appeared in 3.0BSD.  It is documented as being obsolete in 4.3BSD, and as legacy in SUSv2.  It does not appear in POSIX.1.

       The function ppvvaalllloocc() is a GNU extension.

       The function mmeemmaalliiggnn() appears in SunOS 4.1.3 but not in 4.4BSD.

       The function ppoossiixx__mmeemmaalliiggnn() comes from POSIX.1d and is specified in POSIX.1-2001 and POSIX.1-2008.

       The function aalliiggnneedd__aalllloocc() is specified in the C11 standard.

   HHeeaaddeerrss
       Everybody agrees that ppoossiixx__mmeemmaalliiggnn() is declared in _<_s_t_d_l_i_b_._h_>.

       On some systems mmeemmaalliiggnn() is declared in _<_s_t_d_l_i_b_._h_> instead of _<_m_a_l_l_o_c_._h_>.

       According to SUSv2, vvaalllloocc() is declared in _<_s_t_d_l_i_b_._h_>.  Glibc declares it in _<_m_a_l_l_o_c_._h_>, and also in _<_s_t_d_l_i_b_._h_> if suitable feature test macros are defined (see above).

NNOOTTEESS
       On many systems there are alignment restrictions, for example, on buffers used for direct block device I/O.  POSIX specifies the _p_a_t_h_c_o_n_f_(_p_a_t_h_,___P_C___R_E_C___X_F_E_R___A_L_I_G_N_) call that tells what  alignment  is
       needed.  Now one can use ppoossiixx__mmeemmaalliiggnn() to satisfy this requirement.

       ppoossiixx__mmeemmaalliiggnn() verifies that _a_l_i_g_n_m_e_n_t matches the requirements detailed above.  mmeemmaalliiggnn() may not check that the _a_l_i_g_n_m_e_n_t argument is correct.

       POSIX  requires  that  memory obtained from ppoossiixx__mmeemmaalliiggnn() can be freed using ffrreeee(3).  Some systems provide no way to reclaim memory allocated with mmeemmaalliiggnn() or vvaalllloocc() (because one can pass to
       ffrreeee(3) only a pointer obtained from mmaalllloocc(3), while, for example, mmeemmaalliiggnn() would call mmaalllloocc(3) and then align the obtained value).  The glibc implementation allows memory obtained from  any  of
       these functions to be reclaimed with ffrreeee(3).

       The glibc mmaalllloocc(3) always returns 8-byte aligned memory addresses, so these functions are needed only if you require larger alignment values.

SSEEEE AALLSSOO
       bbrrkk(2), ggeettppaaggeessiizzee(2), ffrreeee(3), mmaalllloocc(3)

CCOOLLOOPPHHOONN
       This  page  is  part  of  release  5.10  of  the  Linux  _m_a_n_-_p_a_g_e_s  project.   A  description  of  the project, information about reporting bugs, and the latest version of this page, can be found at
       https://www.kernel.org/doc/man-pages/.

GNU                                                                                               2020-12-21                                                                                POSIX_MEMALIGN(3)
